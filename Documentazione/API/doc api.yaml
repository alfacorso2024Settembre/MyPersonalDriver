openapi: 3.0.3
info:
  title: MyPersonalDriver
  description: Applicazione MyPersonalDriver
  version: 1.0.11

paths:
  /users/{idUser}/documents/{idDocument}:
    patch:
      tags:
        - Users
      summary: Change document state or description
      description: Change the status of the document to valid or denied or its description
      operationId: changeDocument
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: idUser
          in: path
          description: Id of the user to update
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: idDocument
          description: Id of the document to patch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newState:
                  type: string
                  description: new state for the document
                newDescription:
                  type: string
                  description: new description for the document
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "422":
          description: Validation exception
        "500":
          description: Internal server error
  /users/{idUser}/accept:
    put:
      summary: Accept user profile changes
      description: The admin accepts the changes of the profile of the users
      tags:
        - Users
      operationId: acceptChanges
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: ID of the user whose changes are to be accepted.
      responses:
        "200":
          description: Modification completed successfully.
        "400":
          description: Modification failed
        "403":
          description: Not an admin

  /rides/{idUser}:
    patch:
      tags:
        - Rides
      summary: Change the status of the ride
      description: Change the status of the ride when the user makes the deposit
      operationId: changeStatusRide
      parameters:
        - name: idUser
          in: path
          description: Id of the user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newState:
                  type: string
                  description: new state for the ride
                newDescription:
                  type: string
                  description: new state for the ride
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "422":
          description: Validation exception
        "500":
          description: Internal server error

  /users/{idUser}:
    put:
      summary: Modify user profile
      description: Updates the profile details of a specific user by their ID.
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: ID of the user whose profile is to be modified.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Profile updated successfully
        "400":
          description: Invalid ID.
    get:
      tags:
        - Users
      summary: View user's profile
      description: View a list of all the user's features
      operationId: getFeatures
      parameters:
        - name: idUser
          in: path
          description: Id of the user that wants to see hei own profile
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
  /users/{idUser}/reservations:
    post:
      tags:
        - Users
      summary: Add new reservation
      description: User adds a new reservation
      operationId: addUserReservation
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: Id of the user that adds a new reservation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idDriver:
                  type: integer
                  format: int64
                  example: 111
                position:
                  $ref: "#/components/schemas/position"
      responses:
        "200":
          description: Added successfully
        "400":
          description: Invalid ID.
    
    get:
      tags:
        - Users
      summary: View existing reservations
      description: User or driver views the reservations relative to his account
      operationId: viewReservation
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: Id of the user that views the reservations
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID.

  /users/{idUser}/reservations/{idReservation}:
    patch:
      tags:
        - Users
      summary: Accept or reject reservation
      description: Driver accepts or rejects booking request from user
      operationId: acceptReservation
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: Id of the user that accepts or rejects the booking request
        - in: path
          name: idReservation
          required: true
          schema:
            type: integer
            description: id of the reservation to accept or reject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStatus:
                  type: string
                  enum:
                    - accettata
                    - rifiutata
                    - cancellata
                  description: Nuovo stato della prenotazione
              required:
                - newStatus
      responses:
        "204":
          description: Successful operations
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "422":
          description: Validation exception

  /users/{idUser}/rides/{idRide}/reports:
    post:
      tags:
        - Users
      summary: Add a new report
      description: Insert a new report related to a specific ride
      operationId: addReport
      parameters:
        - name: idUser
          in: path
          description: UserId who wants to send a report
          required: true
          schema:
            type: integer
            format: int64
        - name: idRide
          in: path
          description: rideId of the ride related to the report
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: Invalid status value
        "404":
          description: ID not found
  /users/{idUser}/rides/{idRide}/reports/{idReport}:
    put:
      tags:
        - Users
      summary: Modify report
      description: Modify an existing report related to a specific ride
      operationId: updateReport
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: Id of the user that wants to modify a report
        - name: idRide
          in: path
          description: Id of the ride related to the report
          required: true
          schema:
            type: integer
            format: int64
        - name: idReport
          in: path
          description: Id of the report
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: Invalid status value
        "404":
          description: ID not found

  /rides/{idRide}/reports/{idReport}:
    delete:
      tags:
        - Rides
      summary: Delete report
      description: Delete an existing report related to a specific ride
      operationId: deleteReport
      parameters:
        - name: idRide
          in: path
          description: Id of the ride related to the report
          required: true
          schema:
            type: integer
            format: int64
        - name: idReport
          in: path
          description: Id to the report
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "successful operation"
        "400":
          description: Invalid status value
        "404":
          description: ID not found

  /users/{idUser}/rides/reports:
    get:
      tags:
        - Users
      summary: View existing reports
      description: View existing reports
      operationId: viewReports
      parameters:
        - name: idUser
          in: path
          description: Id of the user that sent the reports
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation

  /users/{idUser}/documents/{idDocument}/acceptChanges: #da controllare
    patch:
      tags:
        - Users
      summary: Accept user documents
      description: Accepts documents that the user inserts for the first time or following a modification
      operationId: acceptDocuments
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: idUser
          in: path
          description: User id that changed the documents
          required: true
          schema:
            type: integer
            format: int64
        - name: idDocument
          in: path
          description: Document id that was modified
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
          application/xml:
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid status value
        "403":
          description: not allowed

  /users/{idUser}/suspend: #da controllare
    patch:
      tags:
        - Users
      summary: Suspends an accounts
      description: Suspends accounts due to lack of documents or following an unpaid fine
      operationId: suspendAccount
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: idUser
          in: path
          description: User id to suspend
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  example: sospeso
          application/xml:
            schema:
              $ref: "#/components/schemas/User" #da controllare
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid tag value
        "403":
          description: not allowed
  /users/{idUser}/searchDrivers: #da controllare
    get:
      tags:
        - Users
      summary: Get all the free driver
      description: Get all the free driver By distance and availability
      operationId: searchDrivers
      parameters:
        - name: idUser
          in: path
          description: Id values that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Driver list visualize correctly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found, access denied
        "422":
          description: Exception occured

  /users/{idUser}/Cars:
    post:
      tags:
        - Users
      summary: Add user's car
      description: The user can add a own car
      operationId: addCar
      parameters:
        - name: idUser
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
          application/xml:
            schema:
              $ref: "#/components/schemas/Car"
      responses:
        "200":
          description: Car added correctly

        "400":
          description: Invalid ID supplied
        "404":
          description: User not found, access denied
        "422":
          description: Exception occured
    get:
      tags:
        - Users
      summary: View cars
      description: View all the car of the user filter by userId
      operationId: viewCars
      parameters:
        - name: idUser
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The cars are viewed correctly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
            application/xml:
              schema:
                $ref: "#/components/schemas/Car"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found, access denied
        "422":
          description: Exception occured

  /users/{idUser}/Cars/{plate}:
    delete:
      tags:
        - Users
      summary: Delete car
      description: Delete a car of the user filtered by idUser ad plate
      operationId: deleteCar
      parameters:
        - name: idUser
          in: path
          description: ID of the owner of the car
          required: true
          schema:
            type: integer
            format: int64
        - name: plate
          in: path
          description: ID of the car
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Car delete complete
        "400":
          description: Invalid ID supplied, car wasn't cancelled
        "404":
          description: Car not found
  /reservations:
    post:
      tags:
        - Reservations
      summary: Add new reservation
      description: The user will send a ride reservation request
      operationId: addReservation
      parameters:
        - name: userId
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid tag value
  /accounts: #register
    post:
      tags:
        - Accounts
      summary: Create new user
      description: This can only be done by new users.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
          application/xml:
            schema:
              $ref: "#/components/schemas/Account"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        300:
          description: waiting for email confirmation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterAwaitingConfirmation"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterAwaitingConfirmation"

        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSuccessfull"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSuccessfull"
        400:
          description: client error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterCError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterCError"
        500:
          description: server error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSError"
    put:
      summary: Modify account details
      description: Updates specific account details by account ID.
      tags:
        - Accounts

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        "200":
          description: Account updated successfully
        "400":
          description: Invalid ID.
    get:
      tags:
        - Accounts
      summary: View accounts
      description: View all the account in the database
      operationId: getAccount

      responses:
        "200":
          description: The Account are viewed correctly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
            application/xml:
              schema:
                $ref: "#/components/schemas/Car"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found, access denied
        "422":
          description: Exception occured

  /accounts/{idAccount}/ban:
    patch:
      tags:
        - Accounts
      summary: Ban account
      description: Delete a user following a serious report
      operationId: banAccount
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: idAccount
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
        "403":
          description: not allowed
        "422":
          description: Validation exception
  /accounts/{idAccount}:
    patch:
      tags:
        - Accounts
      summary: Delete an account
      description: User delete his own account
      operationId: deleteAccount
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - in: path
          name: idAccount
          required: true
          schema:
            type: integer
            format: int64
          description: id of the account to be deleted
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "422":
          description: Validation exception
  /authentication/login:
    post:
      tags:
        - Authentication
      summary: User logs in
      description: authenticates and creates a session token for user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginBody"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoginSuccessfull"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseLoginSuccessfull"

        "204":
          description: Failed operation wrong email/password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLoginError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseLoginError"
        "400":
          description: client error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterCError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterCError"
        "500":
          description: server error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSError"
        default:
          description: successful operation

  /authentication/logout:
    patch:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLogoutSuccessfull"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseLogoutSuccessfull"

        "204":
          description: Failed logout Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseLogoutError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseLogoutError"
        "400":
          description: client error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterCError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterCError"
        "500":
          description: server error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseRegisterSError"
        default:
          description: successful operation
  /accounts/resetpassword: # da controllare
    post:
      tags:
        - Accounts
      summary: User forgot or wants to reset password.
      description: Resets users password.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/resetPasswordBody"
      responses:
        "200":
          description: Password reset successfull.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordSuccessfull"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordSuccessfull"
        "100":
          description: Password format incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordFormatIncorrect"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordFormatIncorrect"

        "204":
          description: Failed operation email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordEmailNotFound"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordEmailNotFound"
        "400":
          description: client error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordError"
        "500":
          description: server error operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordError"
            application/xml:
              schema:
                $ref: "#/components/schemas/ApiResponseResetPasswordError"
        default:
          description: successful operation

  /users/{idUser}/rides/payments:
    get:
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
      tags:
        - Users
      summary: View payments
      description: View all payments of a user
      operationId: viewPayments

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "400":
          description: Invalid status value
  
  /users/{idUser}/rides/{idRide}/payments:
    get:
      tags:
        - Users
      summary: Receive payment
      description: User receives payment, e.g. Driver receives his payment after the ride
      operationId: receivePayment
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: idRide
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "400":
          description: Bad syntax
        "500":
          description: Internal server error
    post:
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: idRide
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID

      tags:
        - Users
      summary: Add payment

      description: User pays for the ride

      operationId: addUserRidePayment

      requestBody:
        description: Add payment to a ride from user

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
          application/xml:
            schema:
              $ref: "#/components/schemas/Payment"
        required: true

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            application/xml:
              schema:
                $ref: "#/components/schemas/Payment"

        "400":
          description: Invalid ID supplied
        "500":
          description: Internal server error
  /rides:
    post:
      tags:
        - Rides
      summary: Add new ride
      description: Adds a new ride
      operationId: addRide
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ride"
      responses:
        "200":
          description: Added successfully
        "400":
          description: Invalid ID.
  /rides/payments:
    get:
      tags:
        - Rides
      summary: View all payments
      description: View all payments of each user
      operationId: ViewRidesPayments
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            application/xml:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          description: Invalid ID supplied
        "404":
          description: Payment not found
  /rides/{idRide}/payments:
    post:
      tags:
        - Rides
      summary: Adds a payment for the ride
      description: A payment is added for the ride
      operationId: addRidePayment
      parameters:
        - in: path
          name: idRide
          required: true
          schema:
            type: integer
            minimum: 1
          description: reservation ID

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"

  /reservations/{idReservation}/deposits:
    get:
      tags:
        - Reservations
      summary: Receive the deposit
      description: The deposit's amount is taken
      operationId: receiveDeposit
      parameters:
        - in: path
          name: idReservation
          required: true
          schema:
            type: integer
            minimum: 1
          description: reservation ID
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deposit"
        "400":
          description: invalid input
        "500":
          description: internal server error
    post:
      tags:
        - Reservations
      summary: Adds initial deposit
      description: Initial deposit is taken for the reservation
      operationId: addDeposit
      parameters:
        - in: path
          name: idReservation
          required: true
          schema:
            type: integer
            minimum: 1
          description: reservation ID

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deposit"
      responses:
        "200":
          description: successful operation
        "400":
          description: invalid input
        "500":
          description: internal server error
  /users/{idUser}/rides/{idRide}/reviews/{idReview}:
    delete:
      summary: Delete a review
      description: User deletes a review
      tags:
        - Users
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: idRide
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID
        - in: path
          name: idReview
          required: true
          schema:
            type: integer
            minimum: 1
          description: review ID
      responses:
        "200":
          description: successful
        "404":
          description: not found
  /users/{idUser}/rides/{idRide}/reviews:
    post:
      tags:
        - Users

      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: idRide
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID
      summary: Adds a review
      description: User reviews the ride
      operationId: addReview

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /users/{idUser}/rides/reviews:
    get:
      tags:
        - Users
      summary: View all reviews of a user
      description: Displays all reviews given by a certain user
      operationId: viewReview
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid input
        "422":
          description: Validation exception

  /users/{idUser}/documents:
    get:
      tags:
        - Users
      summary: View a user document
      description: The administrator views a specific user's document
      operationId: viewUser
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: idUser
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "422":
          description: Validation exception
        "500":
          description: Internal server error
    
    post:
      tags:
        - Users
      summary: Upload new document
      description: Upload a new document to be validated
      operationId: uploadDocument
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: idUser
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                newDocument:
                  type: string
                  format: binary
                  description: "The document file to be uploaded"
                documentDetails:
                  $ref: "#/components/schemas/Document"
              required:
                - newDocument
                - documentDetails
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "422":
          description: Validation exception
        "500":
          description: Internal server error
  /documents:
    get:
      tags:
        - Documents
      summary: View all user's documents
      description: The administrator views all user's document
      operationId: viewDocuments
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
        "400":
          description: Invalid ID supplied
        "404":
          description: Account not found
        "422":
          description: Validation exception
        "500":
          description: Internal server error
components:
  schemas:
    Document:
      type: object
      properties:
        idDocument:
          type: integer
          format: int64
        isValid:
          type: boolean
        expiryDate:
          type: integer
          format: date
        photo:
          type: object
        idUser:
          type: integer
          format: int64
        type:
          type: string
          description: Stato prenotazione
          example: accettata
          enum:
            - licence
            - identity card
            - insurance
      xml:
        name: document
    Car:
      type: object
      properties:
        plate:
          type: string
          description: car license plate
          example: AB123CD
        idInsurance:
          type: boolean
          example: true
        vehicleDisplacement:
          type: integer
          example: 1600
        gearShift:
          type: string
          example: "PLU456PLO"
        brand:
          type: string
        model:
          type: string
      xml:
        name: car
    User:
      type: object
      properties:
        idUser:
          type: integer
          format: int64
          example: 10
        idAccount:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        birthDate:
          type: string
          format: date
          example: 2024-01-01
        phone:
          type: string
          example: "12345abc"
      xml:
        name: user
    Payment:
      type: object
      required:
        - "User"
        - "Ride"
        - "causale"
        - "amount"
        - "date"
      properties:
        idPayment:
          type: integer
          format: int64
          example: 151
        idUser:
          type: integer
          format: int64
        idRide:
          type: integer
          format: int64
        idDriver:
          type: integer
          format: int64
        completed:
          type: boolean
          example: true
        amount:
          type: integer
          format: int64
          example: 16
        date:
          type: string
          format: date
          example: 2024-11-12
      xml:
        name: payment
    Review:
      type: object
      properties:
        idReview:
          type: integer
          format: int64
          example: 1332
        idUser:
          type: integer
          format: int64
        value:
          type: number
          example: 4
        notes:
          type: string
          example: "buon guidatore"
      xml:
        name: review
    Deposit:
      type: object
      properties:
        idDeposit:
          type: integer
          format: int64
          example: 2311
        amount:
          type: integer
          format: int64
          example: 10
      xml:
        name: deposit
    Reservation:
      type: object
      properties:
        idReservation:
          type: integer
          format: int64
          example: 10
        idUser:
          type: integer
        idDriver:
          type: integer
        idDeparture:
          type: integer
        idDeposit:
          type: integer
        idDestination:
          type: integer
        resevationTime:
          type: string
          format: date-time
        status:
          type: string
          description: Stato prenotazione
          example: accettata
          enum:
            - accettata
            - rifiutata
            - in sospeso

    loginBody:
      type: object
      properties:
        email:
          type: string
          example: example@email.com
        password:
          type: string
          format: string
          example: Password1!!

    Account:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "Password1"
        role:
          type: string
          example: "driver"
        status:
          type: string
          example: "bannato"
        idAccount:
          type: integer

    resetPasswordBody:
      type: object
      properties:
        email:
          type: string
          example: example@email.com
        password:
          type: string
          format: string
          example: Password1!!

    ApiResponseLoginSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "logged in successfully"
        body:
          type: string
          example: { SessionToken: "asfasdgfdgcdvlkl" }
      xml:
        name: "##default"

    ApiResponseLoginError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Retry Login"
      xml:
        name: "##default"

    ApiResponseRegisterAwaitingConfirmation:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Verify email by clicking on the link of the confirmation email sent to you."
      xml:
        name: "##default"

    ApiResponseRegisterSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "registred successfully"
      xml:
        name: "##default"

    ApiResponseRegisterCError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Error on client side"
      xml:
        name: "##default"
    ApiResponseRegisterSError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Error on server side"
      xml:
        name: "##default"
    ApiResponseLogoutSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "You have logged out"
      xml:
        name: "##default"
    ApiResponseLogoutError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "You are already logged out"
      xml:
        name: "##default"
    ApiResponseResetPasswordSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Password changed successfully"
      xml:
        name: "##default"

    ApiResponseResetPasswordError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Something went wrong.. Retry later"
      xml:
        name: "##default"

    ApiResponseResetPasswordFormatIncorrect:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Retry Password. Remember: Minimo 8 caratteri Almeno 1 lettera maiuscola Almeno 1 numero Almeno 1 carattere speciale"
      xml:
        name: "##default"

    ApiResponseResetPasswordEmailNotFound:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "There is no account assosiated with this email."
      xml:
        name: "##default"
    Position:
      type: object
      properties:
        idPosition:
          type: integer
          format: int64
          example: 1341
        latitude:
          type: string
          example: via rossi 15
        longitude:
          type: integer
          example: 10110
    Ride:
      type: "object"
      required:
        - "customerId"
        - "status"
      properties:
        idRide:
          type: "integer"
          format: "int64"
          example: "1"
        idDriver:
          type: "integer"
          format: "int64"
          example: "33"
        timeDeparture:
          type: string
        timeArrival:
          type: string
        idDeparture:
          type: integer
        idArrival:
          type: integer
        totalKm:
          type: "integer"
          format: "int64"
          example: "10"
        status:
          type: "string"
          description: "Ride Status"
          example: "pending"
          enum:
            - "concluded"
            - "pending"
            - "cancelled"
      xml:
        name: "Ride"

    Report:
      type: "object"
      required:
        - "rideId"
        - "idUser"
      properties:
        idReport:
          type: "integer"
          format: "int64"
          example: "4"
        idUser:
          type: "integer"
          format: "int64"
          example: "24"
        idRide:
          type: integer
          format: int64
          example: 23
        descriprion:
          type: "string"
          example: "C'è stato un errore nel pagamento della corsa"
        status:
          type: "string"
          description: "Report Status"
          example: "concluded"
          enum:
            - "awaiting review"
            - "concluded"
            - "cancelled"
      xml:
        name: "Report"
