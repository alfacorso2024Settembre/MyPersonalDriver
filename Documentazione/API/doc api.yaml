openapi: 3.0.3
info:
  title: MyPersonalDriver
  description: Applicazione MyPersonalDriver
  version: 1.0.11

paths:
  /admins/acceptAccountChanges:
    put:
      summary: Accept account changes
      description: The admin accepts the changes of the accounts of the users
      tags:
        - Admins
      responses:
        '200':
          description: Modification completed successfully.
        '400':
          description:  Modification failed

  /users/{id}/modifyProfile:
    put:
      summary: Modify user profile
      description: Updates the profile details of a specific user by their ID.
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user whose profile is to be modified.
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: ''
            application/xml:
              schema:
                $ref: ''
        '400':
          description: Invalid ID.

  /accounts/{id}/modifyAccount:
    put:
      summary: Modify account details
      description: Updates specific account details by account ID.
      tags:
        - Accounts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the account to be modified.
      responses:
        '200':
          description: Account updated successfully
        '400':
          description: Invalid ID.
  
  
  /users/{idUser}/reservations/{idReservation}/ChangeReservationStatus:
    patch:
      tags:
        - Users
      summary: Accept reservation
      description: Driver accepts booking request from user
      operationId: acceptReservation
      parameters:
        - in: path
          name: idUser
          required: true
          schema:
            type: integer
          description: Id of the user that accepts the booking request
        - in: path
          name: idReservation
          required: true
          schema:
            type: integer
            description: id of the reservation to accept
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                newStatus:
                  type: string
                  enum:
                    - accettata
                    - rifiutata
                    - cancellata
                  description: Nuovo stato della prenotazione
              required:
                - newStatus     
      responses:
        '204':
          description: Successful operations
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '422':
          description: Validation exception

  /users/{userId}/rides/{rideId}/reports:
    post:
      tags:
        - Users
      summary: Add a new report
      description: Insert a new report relating to a specific ride
      operationId: addReport
      parameters:
        - name: userId
          in: path
          description: UserId who wants to send a report
          required: true
          schema:
            type: integer
            format: int64
        - name: rideId
          in: path
          description: rideId of the ride related to the report
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Report"
        '400':
          description: Invalid status value
        '404':
          description: ID not found
    put:
      tags:
        - Rides
      summary: Modify report
      description: Modify an existing report report relating to a specific ride
      operationId: updateReport
      parameters:
        - name: rideId
          in: path
          description: rideId of the ride related to the report
          required: true
          schema:
            type: integer
            format: int64
        - name: reportId
          in: path
          description: reportId related to the report
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Report"
        '400':
          description: Invalid status value
        '404':
          description: ID not found
  
  /rides/{rideId}/reports/{reportId}:
    delete:
      tags:
        - Rides
      summary: Delete segnalazione
      description: Delete an existing report report relating to a specific ride
      operationId: deleteReport
      parameters:
        - name: rideId
          in: path
          description: rideId of the ride related to the report
          required: true
          schema:
            type: integer
            format: int64
        - name: reportId
          in: path
          description: reportId related to the report
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Report"
        '400':
          description: Invalid status value
        '404':
          description: ID not found
  
  /users/{userId}/reports:
    get:
      tags:
        - Users
      summary: View existing reports
      description: View existing reports
      operationId: viewReports
      parameters:
        - name: userId
          in: path
          description: userId who sent the reports
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation

  /accounts/{userId}:
    delete:
      tags:
        - Accounts
      summary: Delete a user
      description: User delete his own profile
      operationId: deleteUser
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
  /admins/deleteUser/{userId}:
    delete:
      tags:
        - Admins
      summary: Delete account
      description: Delete a user following a serious report
      operationId: deleteAccount
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /admins/acceptDocuments/{userId}:
    patch:
      tags:
        - Admins
      summary: Accept user documents
      description: Accepts documents that the user inserts for the first time or following a modification
      operationId: acceptDocuments
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: ''
          application/xml:
            schema:
              $ref: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''
            application/xml:
              schema:
                type: array
                items:
                  $ref: ''
        '400':
          description: Invalid status value
  /admins/suspendAccount/{userId}:
    patch:
      tags:
        - Admins
      summary: Suspends an accounts
      description: Suspends accounts due to lack of documents or following an unpaid fine
      operationId: suspendAccount
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: ''
          application/xml:
            schema:
              $ref: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''
            application/xml:
              schema:
                type: array
                items:
                  $ref: ''
        '400':
          description: Invalid tag value
  /Users/{UserId}/searchDrivers:
    get:
      tags:
        - Users
      summary: Get all the free driver
      description: Get all the free driver By distance and availability
      operationId: searchDrivers
      parameters:
        - name: UserId
          in: path
          description: Id values that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Driver list visualize correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found, access denied
        '422':
          description: Exception occured
  
  /users/{userId}/Cars/add:
    post:
      tags:
        - Users
      summary: Add user's car
      description: The user can add a own car
      operationId: addCar
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Car added correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found, access denied
        '422':
          description: Exception occured
  /users/{userId}/Cars/view:
    get:
      tags:
        - Users
      summary: View cars
      description: View all the car of the user filter by userId
      operationId: viewCars
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The cars are viewed correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found, access denied
        '422':
          description: Exception occured
  /users/{userId}/Cars/{carId}/delete:
    delete:
      tags:
        - Users
      summary: Delete car
      description: Delete a car of the user filtered by idUser ad iDcar
      operationId: deleteCar
      parameters:
        - name: userId
          in: path
          description: ID of the owner of the car
          required: true
          schema:
            type: integer
            format: int64
        - name: carId
          in: path
          description: ID of the car
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Car delete complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid ID supplied, car wasn't cancelled
        '404':
          description: Car not found
  /reservations/add:
    post:
      tags:
        - Reservations
      summary: add a reservations
      description: The user will send a ride reservation request
      operationId: addReservation
      parameters:
        - name: userId
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''
            application/xml:
              schema:
                type: array
                items:
                  $ref: ''
        '400':
          description: Invalid tag value
  /accounts/register:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by new users.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json: 
            schema:
             $ref: '#/components/schemas/register'
          application/xml:
            schema:
              $ref: '#/components/schemas/register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/register'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSuccessfull'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSuccessfull'
        400:
          description: client error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterCError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterCError'
        500:
          description: server error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSError'
        
  /accounts/login:
    post:
      tags:
        - user
      summary: User logs in
      description: authenticates and creates a session token for user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/loginBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLoginSuccessfull'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseLoginSuccessfull'
        
        '204':
          description: Failed operation wrong email/password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLoginError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseLoginError'
        400:
          description: client error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterCError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterCError'
        500:
          description: server error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSError'
        default:
          description: successful operation
        
  
  /accounts/logout:
    delete:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLogoutSuccessfull'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseLogoutSuccessfull'
        
        '204':
          description: Failed logout Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLogoutError'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseLogoutError'
        400:
          description: client error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterCError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterCError'
        500:
          description: server error operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseRegisterSError'
        default:
          description: successful operation

  /users/{id_user}/rides/{id_ride}/payments/add:
    
    post:
      parameters:
        - in: path
          name: id_user
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: id_ride
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID
      
      tags:
        - Users
      summary: Add payment
      
      description: User pays for the ride
      
      operationId: addUserRidePayment
      
      requestBody:
        
        description: Add payment to a ride from user
        
        content:
          
          application/json:
            schema:
              $ref: '#/components/Payment'
          application/xml:
            schema:
              $ref: '#/components/Payment'
        required: true
      
      responses:
        
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/Payment'
            application/xml:
              schema:
                $ref: '#/components/Payment'
        
        '400':
          description: Invalid ID supplied
        
        '404':
          description: X not found
        
        '422':
          description: Validation exception
  
  
  
  /users/{id_user}/rides/payments/view:
    get:
      parameters:
        - in: path
          name: id_user
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
      tags:
        - Users
      summary: View payments
      description: View all payments of a user
      operationId: viewPayments
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/Payment'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/Payment'
        '400':
          description: Invalid status value
  
  /users/{id_user}/rides/{id_ride}/payments/receive:
    get:
      tags:
        - Users
      summary: Receive payment
      description: User receives payment, e.g. Driver receives his payment after the ride
      operationId: receivePayment
      parameters:
        - in: path
          name: id_user
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: id_ride
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/Payment'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/Payment'
        '400':
          description: Invalid tag value
  /rides/payments/view:
    get:
      tags:
        - Rides
      summary: View all payments
      description: View all payments of each user
      operationId: ViewRidesPayments
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/Payment'
            application/xml:
              schema:
                $ref: '#/components/Payment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Payment not found
  /rides/{id_ride}/payments/add:
    post:
      tags:
        - Rides
      summary: Adds a payment for the ride
      description: A payment is added for the ride
      operationId: addRidePayment
      parameters:
        - in: path
          name: id_ride
          required: true
          schema:
            type: integer
            minimum: 1
          description: reservation ID
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/Payment'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/Payment'
  
  /reservations/{id_reservation}/addDeposit:
    post:
      tags:
        - Reservations
      summary: Adds initial deposit
      description: Initial deposit is taken for the reservation
      operationId: addInitialDeposit
      parameters:
        - in: path
          name: id_reservation
          required: true
          schema:
            type: integer
            minimum: 1
          description: reservation ID
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/Deposit'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/Deposit'
  
  
  /users/{id_user}/rides/{id_ride}/reviews/add:
    post:
      tags:
        - Users
      
      parameters:
        - in: path
          name: id_user
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
        - in: path
          name: id_ride
          required: true
          schema:
            type: integer
            minimum: 1
          description: ride ID
      summary: Adds a review
      description: User reviews the ride
      operationId: addReview
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/Review'
      
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /users/{id_user}/rides/reviews/view:
    get:
      tags:
        - Users
      summary: View all reviews of a user
      description: Displays all reviews given by a certain user
      operationId: viewReview
      parameters:
        - in: path
          name: id_user
          required: true
          schema:
            type: integer
            minimum: 1
          description: user ID
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/Review'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /users/{userId}/documents/viewDocument:
    get:
      tags:
        - documents
      summary: View a user document
      description: The administrator views a specific user's document
      operationId: viewUser
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
        '500':
          description: Internal server error
  /users/{userId}/documents/changeDocumentDesc:
    put:
      tags:
        - documents
      summary: Change description
      description: Change document description
      operationId: changeDocumentDesc
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              type: object
              properties:
                newDescription:
                  type: string
                  description: new description for the document
              required:
                - newDescription
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
        '500':
          description: Internal server error
  /users/{userId}/documents/changeDocumentState:
    patch:
      tags:
        - documents
      summary: Change document state
      description: Change the status of the document to valid and denied
      operationId: changeDocumentState
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              type: object
              properties:
                newState:
                  type: string
                  description: new state for the document
              required:
                - newState
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
        '500':
          description: Internal server error
  /users/{userId}/documents/changeValidity:
    patch:
      tags:
        - documents
      summary: Change document validity
      description: Change document validity
      operationId: changeValidity
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              type: object
              properties:
                newValidity:
                  type: boolean
                  description: new validity for the document
              required:
                - newValidity
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
        '500':
          description: Internal server error
  /users/{userId}/documents/uploadDocument:
    post:
      tags:
        - documents
      summary: Upload new document
      description: Upload a new document to be validated
      operationId: uploadDocument
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                newDocument:
                  type: string
                  format: binary
                  description: "The document file to be uploaded"
                documentDetails:
                  $ref: '#/components/schemas/Documents'
              required:
                - newDocument
                - documentDetails
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
        '500':
          description: Internal server error
          
components:
  schemas:
    Car:
      type: object
      properties:
        carId:
          type: integer
          format: int64
          example: 10
        plate:
          type: string
          description: car license plate
          example: AB123CD
        isInsured:
          type: boolean
          example: true
        insuranceExpireDate:
          type: string
          format: date-time
        vehicleDisplacement:
          type: integer
          example: 1600
      xml:
        name: car
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        birthDate:
          type: string
          format: date
          example: 2024-01-01
        email:
          type: string
          format: email
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345abc'
        document:
          $ref: '#/components/schemas/Documents'
      xml:
        name: user
    Payment: 
      type: object
      properties: 
        id_transaction:
          type: integer
          format: int64
          example: 151
        User:
          $ref: "#/components/schemas/User"
        Ride:
          $ref: "#/components/schemas/Ride"
        completed:
          type: boolean
          example: true
        causale:
          type: string
          example: "causale 1"
        amount:
          type: integer
          format: int64
          example: 16
        date:
          type: string
          format: date
          example: 2024-11-12
      xml:
        name: payment
    Review:
      type: object
      properties:
        id_review:
          type: integer
          format: int64
          example: 1332
        User:
           $ref: "#/components/schemas/User"
        value:
          type: number
          example: 4
        notes:
          type: string
          example: "buon guidatore"
      xml:
        name: review
    Deposit:
      type: object
      properties:
        id_deposit:
          type: integer
          format: int64
          example: 2311
        value:
          type: integer
          format: int64
          example: 10
      xml:
        name: deposit
    Reservation:
      type: object
      properties:
        reservationId:
          type: integer
          format: int64
          example: 10
        user:
          $ref: "#/components/schemas/User"
        driver:
          $ref: "#/components/schemas/User"
        resevationTime:
          type: string
          format: date-time
        status:
          type: string
          description: Stato prenotazione
          example: accettata
          enum:
            - accettata
            - rifiutata    
    loginBody:
      type: object
      properties:
        email:
          type: string
          example: example@email.com
        password:
          type: string
          format: string
          example: Password1!!
    
    register:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        
        password:
          type: string
          example: 'Password1'
        
        role:
          type: string
          example: 'driver'
        
        firstName:
          type: string
          example: 'Idri'
        lastName:
          type: string
          example: 'Hoxha'
        dateOfBirth:
          type: object
          example: '20/04/2000'
        
    ApiResponseLoginSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "logged in successfully"
        body:
          type: string
          example: {
            SessionToken: "asfasdgfdgcdvlkl"
          }
      xml:
        name: '##default'
      
    ApiResponseLoginError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Retry Login"
      xml:
          name: '##default'
    
    ApiResponseRegisterSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "registred successfully"
      xml:
        name: '##default'
    
    ApiResponseRegisterCError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Error on client side"
      xml:
        name: '##default'
    ApiResponseRegisterSError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "Error on server side"
      xml:
        name: '##default'
    ApiResponseLogoutSuccessfull:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "You have logged out"
      xml:
        name: '##default'
    ApiResponseLogoutError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
          example: "You are already logged out"
      xml:
        name: '##default'
    Ride:
      type: "object"
      required:
      - "customerId"
      - "status"
      properties:
        rideId:
          type: "integer"
          format: "int64"
          example: "1"
          example: 
        customerId:
          type: "integer"
          format: "int64"
          example: "24"
        driverId:
          type: "integer"
          format: "int64"
          example: "33"
        departure:
          type: "string"
          example: "Via Roma, 30"
        destination:
          type: "string"
          example: "Corso Svizzera, 255"
        totalKm:
          type: "integer"
          format: "int64"
          example: "10"
        status:
          type: "string"
          description: "Ride Status"
          example: "pending"
          enum:
          - "concluded"
          - "pending"
          - "cancelled"
      xml:
        name: "Ride"
        
    Report:
      type: "object"
      required:
        - "rideId"
        - "userId"
      properties:
        reportId:
          type: "integer"
          format: "int64"
          example: "4"
        userId:
          type: "integer"
          format: "int64"
          example: "24"
        ride:
          $ref: "#/definitions/Ride"
        descriprion:
          type: "string"
          example: "C'è stato un errore nel pagamento della corsa"
        status:
          type: "string"
          description: "Report Status"
          example: "concluded"
          enum:
          - "awaiting review"
          - "concluded"
          - "cancelled"
      xml:
        name: "Report"
